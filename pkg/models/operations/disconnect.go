// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type DisconnectRequest struct {
	VehicleID string `pathParam:"style=simple,explode=false,name=vehicle_id"`
}

func (o *DisconnectRequest) GetVehicleID() string {
	if o == nil {
		return ""
	}
	return o.VehicleID
}

// DisconnectStatus - Revoke application access
type DisconnectStatus string

const (
	DisconnectStatusSuccess DisconnectStatus = "success"
)

func (e DisconnectStatus) ToPointer() *DisconnectStatus {
	return &e
}

func (e *DisconnectStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "success":
		*e = DisconnectStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DisconnectStatus: %v", v)
	}
}

type DisconnectResponse struct {
	ContentType string
	// Revoke application access
	Status      *DisconnectStatus
	StatusCode  int
	RawResponse *http.Response
}

func (o *DisconnectResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *DisconnectResponse) GetStatus() *DisconnectStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *DisconnectResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *DisconnectResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}
