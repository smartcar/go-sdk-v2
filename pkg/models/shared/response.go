// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
)

type ResponseBodyType string

const (
	ResponseBodyTypeLocation              ResponseBodyType = "Location"
	ResponseBodyTypeOdometer              ResponseBodyType = "Odometer"
	ResponseBodyTypeFuelTank              ResponseBodyType = "FuelTank"
	ResponseBodyTypeTirePressure          ResponseBodyType = "TirePressure"
	ResponseBodyTypeEngineOil             ResponseBodyType = "EngineOil"
	ResponseBodyTypeChargeStatus          ResponseBodyType = "ChargeStatus"
	ResponseBodyTypeChargeLimit           ResponseBodyType = "ChargeLimit"
	ResponseBodyTypeChargeTime            ResponseBodyType = "ChargeTime"
	ResponseBodyTypeChargeVoltage         ResponseBodyType = "ChargeVoltage"
	ResponseBodyTypeBatteryLevel          ResponseBodyType = "BatteryLevel"
	ResponseBodyTypeBatteryCapacity       ResponseBodyType = "BatteryCapacity"
	ResponseBodyTypeCompatibilityResponse ResponseBodyType = "CompatibilityResponse"
	ResponseBodyTypeVinInfo               ResponseBodyType = "VinInfo"
	ResponseBodyTypeUserInfo              ResponseBodyType = "UserInfo"
	ResponseBodyTypeSuccessResponse       ResponseBodyType = "SuccessResponse"
	ResponseBodyTypeSecurityRead          ResponseBodyType = "SecurityRead"
)

type ResponseBody struct {
	Location              *Location
	Odometer              *Odometer
	FuelTank              *FuelTank
	TirePressure          *TirePressure
	EngineOil             *EngineOil
	ChargeStatus          *ChargeStatus
	ChargeLimit           *ChargeLimit
	ChargeTime            *ChargeTime
	ChargeVoltage         *ChargeVoltage
	BatteryLevel          *BatteryLevel
	BatteryCapacity       *BatteryCapacity
	CompatibilityResponse *CompatibilityResponse
	VinInfo               *VinInfo
	UserInfo              *UserInfo
	SuccessResponse       *SuccessResponse
	SecurityRead          *SecurityRead

	Type ResponseBodyType
}

func CreateResponseBodyLocation(location Location) ResponseBody {
	typ := ResponseBodyTypeLocation

	return ResponseBody{
		Location: &location,
		Type:     typ,
	}
}

func CreateResponseBodyOdometer(odometer Odometer) ResponseBody {
	typ := ResponseBodyTypeOdometer

	return ResponseBody{
		Odometer: &odometer,
		Type:     typ,
	}
}

func CreateResponseBodyFuelTank(fuelTank FuelTank) ResponseBody {
	typ := ResponseBodyTypeFuelTank

	return ResponseBody{
		FuelTank: &fuelTank,
		Type:     typ,
	}
}

func CreateResponseBodyTirePressure(tirePressure TirePressure) ResponseBody {
	typ := ResponseBodyTypeTirePressure

	return ResponseBody{
		TirePressure: &tirePressure,
		Type:         typ,
	}
}

func CreateResponseBodyEngineOil(engineOil EngineOil) ResponseBody {
	typ := ResponseBodyTypeEngineOil

	return ResponseBody{
		EngineOil: &engineOil,
		Type:      typ,
	}
}

func CreateResponseBodyChargeStatus(chargeStatus ChargeStatus) ResponseBody {
	typ := ResponseBodyTypeChargeStatus

	return ResponseBody{
		ChargeStatus: &chargeStatus,
		Type:         typ,
	}
}

func CreateResponseBodyChargeLimit(chargeLimit ChargeLimit) ResponseBody {
	typ := ResponseBodyTypeChargeLimit

	return ResponseBody{
		ChargeLimit: &chargeLimit,
		Type:        typ,
	}
}

func CreateResponseBodyChargeTime(chargeTime ChargeTime) ResponseBody {
	typ := ResponseBodyTypeChargeTime

	return ResponseBody{
		ChargeTime: &chargeTime,
		Type:       typ,
	}
}

func CreateResponseBodyChargeVoltage(chargeVoltage ChargeVoltage) ResponseBody {
	typ := ResponseBodyTypeChargeVoltage

	return ResponseBody{
		ChargeVoltage: &chargeVoltage,
		Type:          typ,
	}
}

func CreateResponseBodyBatteryLevel(batteryLevel BatteryLevel) ResponseBody {
	typ := ResponseBodyTypeBatteryLevel

	return ResponseBody{
		BatteryLevel: &batteryLevel,
		Type:         typ,
	}
}

func CreateResponseBodyBatteryCapacity(batteryCapacity BatteryCapacity) ResponseBody {
	typ := ResponseBodyTypeBatteryCapacity

	return ResponseBody{
		BatteryCapacity: &batteryCapacity,
		Type:            typ,
	}
}

func CreateResponseBodyCompatibilityResponse(compatibilityResponse CompatibilityResponse) ResponseBody {
	typ := ResponseBodyTypeCompatibilityResponse

	return ResponseBody{
		CompatibilityResponse: &compatibilityResponse,
		Type:                  typ,
	}
}

func CreateResponseBodyVinInfo(vinInfo VinInfo) ResponseBody {
	typ := ResponseBodyTypeVinInfo

	return ResponseBody{
		VinInfo: &vinInfo,
		Type:    typ,
	}
}

func CreateResponseBodyUserInfo(userInfo UserInfo) ResponseBody {
	typ := ResponseBodyTypeUserInfo

	return ResponseBody{
		UserInfo: &userInfo,
		Type:     typ,
	}
}

func CreateResponseBodySuccessResponse(successResponse SuccessResponse) ResponseBody {
	typ := ResponseBodyTypeSuccessResponse

	return ResponseBody{
		SuccessResponse: &successResponse,
		Type:            typ,
	}
}

func CreateResponseBodySecurityRead(securityRead SecurityRead) ResponseBody {
	typ := ResponseBodyTypeSecurityRead

	return ResponseBody{
		SecurityRead: &securityRead,
		Type:         typ,
	}
}

func (u *ResponseBody) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	odometer := new(Odometer)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&odometer); err == nil {
		u.Odometer = odometer
		u.Type = ResponseBodyTypeOdometer
		return nil
	}

	engineOil := new(EngineOil)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&engineOil); err == nil {
		u.EngineOil = engineOil
		u.Type = ResponseBodyTypeEngineOil
		return nil
	}

	chargeLimit := new(ChargeLimit)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&chargeLimit); err == nil {
		u.ChargeLimit = chargeLimit
		u.Type = ResponseBodyTypeChargeLimit
		return nil
	}

	chargeTime := new(ChargeTime)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&chargeTime); err == nil {
		u.ChargeTime = chargeTime
		u.Type = ResponseBodyTypeChargeTime
		return nil
	}

	chargeVoltage := new(ChargeVoltage)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&chargeVoltage); err == nil {
		u.ChargeVoltage = chargeVoltage
		u.Type = ResponseBodyTypeChargeVoltage
		return nil
	}

	batteryCapacity := new(BatteryCapacity)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&batteryCapacity); err == nil {
		u.BatteryCapacity = batteryCapacity
		u.Type = ResponseBodyTypeBatteryCapacity
		return nil
	}

	vinInfo := new(VinInfo)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&vinInfo); err == nil {
		u.VinInfo = vinInfo
		u.Type = ResponseBodyTypeVinInfo
		return nil
	}

	userInfo := new(UserInfo)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&userInfo); err == nil {
		u.UserInfo = userInfo
		u.Type = ResponseBodyTypeUserInfo
		return nil
	}

	location := new(Location)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&location); err == nil {
		u.Location = location
		u.Type = ResponseBodyTypeLocation
		return nil
	}

	chargeStatus := new(ChargeStatus)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&chargeStatus); err == nil {
		u.ChargeStatus = chargeStatus
		u.Type = ResponseBodyTypeChargeStatus
		return nil
	}

	batteryLevel := new(BatteryLevel)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&batteryLevel); err == nil {
		u.BatteryLevel = batteryLevel
		u.Type = ResponseBodyTypeBatteryLevel
		return nil
	}

	successResponse := new(SuccessResponse)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&successResponse); err == nil {
		u.SuccessResponse = successResponse
		u.Type = ResponseBodyTypeSuccessResponse
		return nil
	}

	fuelTank := new(FuelTank)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&fuelTank); err == nil {
		u.FuelTank = fuelTank
		u.Type = ResponseBodyTypeFuelTank
		return nil
	}

	compatibilityResponse := new(CompatibilityResponse)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&compatibilityResponse); err == nil {
		u.CompatibilityResponse = compatibilityResponse
		u.Type = ResponseBodyTypeCompatibilityResponse
		return nil
	}

	tirePressure := new(TirePressure)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&tirePressure); err == nil {
		u.TirePressure = tirePressure
		u.Type = ResponseBodyTypeTirePressure
		return nil
	}

	securityRead := new(SecurityRead)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&securityRead); err == nil {
		u.SecurityRead = securityRead
		u.Type = ResponseBodyTypeSecurityRead
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u ResponseBody) MarshalJSON() ([]byte, error) {
	if u.Odometer != nil {
		return json.Marshal(u.Odometer)
	}

	if u.EngineOil != nil {
		return json.Marshal(u.EngineOil)
	}

	if u.ChargeLimit != nil {
		return json.Marshal(u.ChargeLimit)
	}

	if u.ChargeTime != nil {
		return json.Marshal(u.ChargeTime)
	}

	if u.ChargeVoltage != nil {
		return json.Marshal(u.ChargeVoltage)
	}

	if u.BatteryCapacity != nil {
		return json.Marshal(u.BatteryCapacity)
	}

	if u.VinInfo != nil {
		return json.Marshal(u.VinInfo)
	}

	if u.UserInfo != nil {
		return json.Marshal(u.UserInfo)
	}

	if u.Location != nil {
		return json.Marshal(u.Location)
	}

	if u.ChargeStatus != nil {
		return json.Marshal(u.ChargeStatus)
	}

	if u.BatteryLevel != nil {
		return json.Marshal(u.BatteryLevel)
	}

	if u.SuccessResponse != nil {
		return json.Marshal(u.SuccessResponse)
	}

	if u.FuelTank != nil {
		return json.Marshal(u.FuelTank)
	}

	if u.CompatibilityResponse != nil {
		return json.Marshal(u.CompatibilityResponse)
	}

	if u.TirePressure != nil {
		return json.Marshal(u.TirePressure)
	}

	if u.SecurityRead != nil {
		return json.Marshal(u.SecurityRead)
	}

	return nil, nil
}

type ResponseCode string

const (
	ResponseCodeTwoHundred  ResponseCode = "200"
	ResponseCodeFiveHundred ResponseCode = "500"
)

func (e ResponseCode) ToPointer() *ResponseCode {
	return &e
}

func (e *ResponseCode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "200":
		fallthrough
	case "500":
		*e = ResponseCode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ResponseCode: %v", v)
	}
}

type Response struct {
	Body    *ResponseBody `json:"body,omitempty"`
	Code    *ResponseCode `json:"code,omitempty"`
	Headers []Header      `json:"headers,omitempty"`
	Path    *string       `json:"path,omitempty"`
}

func (o *Response) GetBody() *ResponseBody {
	if o == nil {
		return nil
	}
	return o.Body
}

func (o *Response) GetCode() *ResponseCode {
	if o == nil {
		return nil
	}
	return o.Code
}

func (o *Response) GetHeaders() []Header {
	if o == nil {
		return nil
	}
	return o.Headers
}

func (o *Response) GetPath() *string {
	if o == nil {
		return nil
	}
	return o.Path
}
