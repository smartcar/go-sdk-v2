// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type Status string

const (
	StatusSuccess Status = "SUCCESS"
	StatusFailed  Status = "FAILED"
)

func (e Status) ToPointer() *Status {
	return &e
}

func (e *Status) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SUCCESS":
		fallthrough
	case "FAILED":
		*e = Status(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Status: %v", v)
	}
}

type SuccessResponse struct {
	Message *string `json:"message,omitempty"`
	Status  *Status `json:"status,omitempty"`
}

func (o *SuccessResponse) GetMessage() *string {
	if o == nil {
		return nil
	}
	return o.Message
}

func (o *SuccessResponse) GetStatus() *Status {
	if o == nil {
		return nil
	}
	return o.Status
}
