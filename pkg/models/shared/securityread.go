// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type SecurityReadSchemasChargingPortStatus string

const (
	SecurityReadSchemasChargingPortStatusOpen    SecurityReadSchemasChargingPortStatus = "OPEN"
	SecurityReadSchemasChargingPortStatusClosed  SecurityReadSchemasChargingPortStatus = "CLOSED"
	SecurityReadSchemasChargingPortStatusUnknown SecurityReadSchemasChargingPortStatus = "UNKNOWN"
)

func (e SecurityReadSchemasChargingPortStatus) ToPointer() *SecurityReadSchemasChargingPortStatus {
	return &e
}

func (e *SecurityReadSchemasChargingPortStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "OPEN":
		fallthrough
	case "CLOSED":
		fallthrough
	case "UNKNOWN":
		*e = SecurityReadSchemasChargingPortStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SecurityReadSchemasChargingPortStatus: %v", v)
	}
}

type Type string

const (
	TypeChargingPort Type = "chargingPort"
)

func (e Type) ToPointer() *Type {
	return &e
}

func (e *Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "chargingPort":
		*e = Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Type: %v", v)
	}
}

type ChargingPort struct {
	Status *SecurityReadSchemasChargingPortStatus `json:"status,omitempty"`
	Type   *Type                                  `json:"type,omitempty"`
}

func (o *ChargingPort) GetStatus() *SecurityReadSchemasChargingPortStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *ChargingPort) GetType() *Type {
	if o == nil {
		return nil
	}
	return o.Type
}

type SecurityReadStatus string

const (
	SecurityReadStatusOpen    SecurityReadStatus = "OPEN"
	SecurityReadStatusClosed  SecurityReadStatus = "CLOSED"
	SecurityReadStatusUnknown SecurityReadStatus = "UNKNOWN"
)

func (e SecurityReadStatus) ToPointer() *SecurityReadStatus {
	return &e
}

func (e *SecurityReadStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "OPEN":
		fallthrough
	case "CLOSED":
		fallthrough
	case "UNKNOWN":
		*e = SecurityReadStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SecurityReadStatus: %v", v)
	}
}

type SecurityReadType string

const (
	SecurityReadTypeFrontLeft  SecurityReadType = "frontLeft"
	SecurityReadTypeFrontRight SecurityReadType = "frontRight"
	SecurityReadTypeBackLeft   SecurityReadType = "backLeft"
	SecurityReadTypeBackRight  SecurityReadType = "backRight"
)

func (e SecurityReadType) ToPointer() *SecurityReadType {
	return &e
}

func (e *SecurityReadType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "frontLeft":
		fallthrough
	case "frontRight":
		fallthrough
	case "backLeft":
		fallthrough
	case "backRight":
		*e = SecurityReadType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SecurityReadType: %v", v)
	}
}

type Doors struct {
	Status *SecurityReadStatus `json:"status,omitempty"`
	Type   *SecurityReadType   `json:"type,omitempty"`
}

func (o *Doors) GetStatus() *SecurityReadStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *Doors) GetType() *SecurityReadType {
	if o == nil {
		return nil
	}
	return o.Type
}

type SecurityReadSchemasStatus string

const (
	SecurityReadSchemasStatusOpen    SecurityReadSchemasStatus = "OPEN"
	SecurityReadSchemasStatusClosed  SecurityReadSchemasStatus = "CLOSED"
	SecurityReadSchemasStatusUnknown SecurityReadSchemasStatus = "UNKNOWN"
)

func (e SecurityReadSchemasStatus) ToPointer() *SecurityReadSchemasStatus {
	return &e
}

func (e *SecurityReadSchemasStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "OPEN":
		fallthrough
	case "CLOSED":
		fallthrough
	case "UNKNOWN":
		*e = SecurityReadSchemasStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SecurityReadSchemasStatus: %v", v)
	}
}

type SecurityReadSchemasType string

const (
	SecurityReadSchemasTypeRear  SecurityReadSchemasType = "rear"
	SecurityReadSchemasTypeFront SecurityReadSchemasType = "front"
)

func (e SecurityReadSchemasType) ToPointer() *SecurityReadSchemasType {
	return &e
}

func (e *SecurityReadSchemasType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "rear":
		fallthrough
	case "front":
		*e = SecurityReadSchemasType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SecurityReadSchemasType: %v", v)
	}
}

type Storage struct {
	Status *SecurityReadSchemasStatus `json:"status,omitempty"`
	Type   *SecurityReadSchemasType   `json:"type,omitempty"`
}

func (o *Storage) GetStatus() *SecurityReadSchemasStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *Storage) GetType() *SecurityReadSchemasType {
	if o == nil {
		return nil
	}
	return o.Type
}

type SecurityReadSchemasSunroofStatus string

const (
	SecurityReadSchemasSunroofStatusOpen    SecurityReadSchemasSunroofStatus = "OPEN"
	SecurityReadSchemasSunroofStatusClosed  SecurityReadSchemasSunroofStatus = "CLOSED"
	SecurityReadSchemasSunroofStatusUnknown SecurityReadSchemasSunroofStatus = "UNKNOWN"
)

func (e SecurityReadSchemasSunroofStatus) ToPointer() *SecurityReadSchemasSunroofStatus {
	return &e
}

func (e *SecurityReadSchemasSunroofStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "OPEN":
		fallthrough
	case "CLOSED":
		fallthrough
	case "UNKNOWN":
		*e = SecurityReadSchemasSunroofStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SecurityReadSchemasSunroofStatus: %v", v)
	}
}

type SecurityReadSchemasSunroofType string

const (
	SecurityReadSchemasSunroofTypeSunroof SecurityReadSchemasSunroofType = "sunroof"
)

func (e SecurityReadSchemasSunroofType) ToPointer() *SecurityReadSchemasSunroofType {
	return &e
}

func (e *SecurityReadSchemasSunroofType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "sunroof":
		*e = SecurityReadSchemasSunroofType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SecurityReadSchemasSunroofType: %v", v)
	}
}

type Sunroof struct {
	Status *SecurityReadSchemasSunroofStatus `json:"status,omitempty"`
	Type   *SecurityReadSchemasSunroofType   `json:"type,omitempty"`
}

func (o *Sunroof) GetStatus() *SecurityReadSchemasSunroofStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *Sunroof) GetType() *SecurityReadSchemasSunroofType {
	if o == nil {
		return nil
	}
	return o.Type
}

type SecurityReadSchemasWindowsStatus string

const (
	SecurityReadSchemasWindowsStatusOpen    SecurityReadSchemasWindowsStatus = "OPEN"
	SecurityReadSchemasWindowsStatusClosed  SecurityReadSchemasWindowsStatus = "CLOSED"
	SecurityReadSchemasWindowsStatusUnknown SecurityReadSchemasWindowsStatus = "UNKNOWN"
)

func (e SecurityReadSchemasWindowsStatus) ToPointer() *SecurityReadSchemasWindowsStatus {
	return &e
}

func (e *SecurityReadSchemasWindowsStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "OPEN":
		fallthrough
	case "CLOSED":
		fallthrough
	case "UNKNOWN":
		*e = SecurityReadSchemasWindowsStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SecurityReadSchemasWindowsStatus: %v", v)
	}
}

type SecurityReadSchemasWindowsType string

const (
	SecurityReadSchemasWindowsTypeFrontLeft  SecurityReadSchemasWindowsType = "frontLeft"
	SecurityReadSchemasWindowsTypeFrontRight SecurityReadSchemasWindowsType = "frontRight"
	SecurityReadSchemasWindowsTypeBackLeft   SecurityReadSchemasWindowsType = "backLeft"
	SecurityReadSchemasWindowsTypeBackRight  SecurityReadSchemasWindowsType = "backRight"
)

func (e SecurityReadSchemasWindowsType) ToPointer() *SecurityReadSchemasWindowsType {
	return &e
}

func (e *SecurityReadSchemasWindowsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "frontLeft":
		fallthrough
	case "frontRight":
		fallthrough
	case "backLeft":
		fallthrough
	case "backRight":
		*e = SecurityReadSchemasWindowsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SecurityReadSchemasWindowsType: %v", v)
	}
}

type Windows struct {
	Status *SecurityReadSchemasWindowsStatus `json:"status,omitempty"`
	Type   *SecurityReadSchemasWindowsType   `json:"type,omitempty"`
}

func (o *Windows) GetStatus() *SecurityReadSchemasWindowsStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *Windows) GetType() *SecurityReadSchemasWindowsType {
	if o == nil {
		return nil
	}
	return o.Type
}

type SecurityRead struct {
	ChargingPort []ChargingPort `json:"chargingPort,omitempty"`
	Doors        []Doors        `json:"doors,omitempty"`
	IsLocked     *bool          `json:"isLocked,omitempty"`
	Storage      []Storage      `json:"storage,omitempty"`
	Sunroof      []Sunroof      `json:"sunroof,omitempty"`
	Windows      []Windows      `json:"windows,omitempty"`
}

func (o *SecurityRead) GetChargingPort() []ChargingPort {
	if o == nil {
		return nil
	}
	return o.ChargingPort
}

func (o *SecurityRead) GetDoors() []Doors {
	if o == nil {
		return nil
	}
	return o.Doors
}

func (o *SecurityRead) GetIsLocked() *bool {
	if o == nil {
		return nil
	}
	return o.IsLocked
}

func (o *SecurityRead) GetStorage() []Storage {
	if o == nil {
		return nil
	}
	return o.Storage
}

func (o *SecurityRead) GetSunroof() []Sunroof {
	if o == nil {
		return nil
	}
	return o.Sunroof
}

func (o *SecurityRead) GetWindows() []Windows {
	if o == nil {
		return nil
	}
	return o.Windows
}
