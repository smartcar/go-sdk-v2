// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/smartcar/go-sdk-v2/pkg/types"
	"github.com/smartcar/go-sdk-v2/pkg/utils"
)

type SecurityReadChargingPortStatus string

const (
	SecurityReadChargingPortStatusOpen    SecurityReadChargingPortStatus = "OPEN"
	SecurityReadChargingPortStatusClosed  SecurityReadChargingPortStatus = "CLOSED"
	SecurityReadChargingPortStatusUnknown SecurityReadChargingPortStatus = "UNKNOWN"
)

func (e SecurityReadChargingPortStatus) ToPointer() *SecurityReadChargingPortStatus {
	return &e
}

func (e *SecurityReadChargingPortStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "OPEN":
		fallthrough
	case "CLOSED":
		fallthrough
	case "UNKNOWN":
		*e = SecurityReadChargingPortStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SecurityReadChargingPortStatus: %v", v)
	}
}

type SecurityReadChargingPort struct {
	Status *SecurityReadChargingPortStatus `json:"status,omitempty"`
	type_  *string                         `const:"chargingPort" json:"type,omitempty"`
}

func (s SecurityReadChargingPort) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SecurityReadChargingPort) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *SecurityReadChargingPort) GetStatus() *SecurityReadChargingPortStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *SecurityReadChargingPort) GetType() *string {
	return types.String("chargingPort")
}

type SecurityReadDoorsStatus string

const (
	SecurityReadDoorsStatusOpen    SecurityReadDoorsStatus = "OPEN"
	SecurityReadDoorsStatusClosed  SecurityReadDoorsStatus = "CLOSED"
	SecurityReadDoorsStatusUnknown SecurityReadDoorsStatus = "UNKNOWN"
)

func (e SecurityReadDoorsStatus) ToPointer() *SecurityReadDoorsStatus {
	return &e
}

func (e *SecurityReadDoorsStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "OPEN":
		fallthrough
	case "CLOSED":
		fallthrough
	case "UNKNOWN":
		*e = SecurityReadDoorsStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SecurityReadDoorsStatus: %v", v)
	}
}

type SecurityReadDoorsType string

const (
	SecurityReadDoorsTypeFrontLeft  SecurityReadDoorsType = "frontLeft"
	SecurityReadDoorsTypeFrontRight SecurityReadDoorsType = "frontRight"
	SecurityReadDoorsTypeBackLeft   SecurityReadDoorsType = "backLeft"
	SecurityReadDoorsTypeBackRight  SecurityReadDoorsType = "backRight"
)

func (e SecurityReadDoorsType) ToPointer() *SecurityReadDoorsType {
	return &e
}

func (e *SecurityReadDoorsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "frontLeft":
		fallthrough
	case "frontRight":
		fallthrough
	case "backLeft":
		fallthrough
	case "backRight":
		*e = SecurityReadDoorsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SecurityReadDoorsType: %v", v)
	}
}

type SecurityReadDoors struct {
	Status *SecurityReadDoorsStatus `json:"status,omitempty"`
	Type   *SecurityReadDoorsType   `json:"type,omitempty"`
}

func (o *SecurityReadDoors) GetStatus() *SecurityReadDoorsStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *SecurityReadDoors) GetType() *SecurityReadDoorsType {
	if o == nil {
		return nil
	}
	return o.Type
}

type SecurityReadStorageStatus string

const (
	SecurityReadStorageStatusOpen    SecurityReadStorageStatus = "OPEN"
	SecurityReadStorageStatusClosed  SecurityReadStorageStatus = "CLOSED"
	SecurityReadStorageStatusUnknown SecurityReadStorageStatus = "UNKNOWN"
)

func (e SecurityReadStorageStatus) ToPointer() *SecurityReadStorageStatus {
	return &e
}

func (e *SecurityReadStorageStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "OPEN":
		fallthrough
	case "CLOSED":
		fallthrough
	case "UNKNOWN":
		*e = SecurityReadStorageStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SecurityReadStorageStatus: %v", v)
	}
}

type SecurityReadStorageType string

const (
	SecurityReadStorageTypeRear  SecurityReadStorageType = "rear"
	SecurityReadStorageTypeFront SecurityReadStorageType = "front"
)

func (e SecurityReadStorageType) ToPointer() *SecurityReadStorageType {
	return &e
}

func (e *SecurityReadStorageType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "rear":
		fallthrough
	case "front":
		*e = SecurityReadStorageType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SecurityReadStorageType: %v", v)
	}
}

type SecurityReadStorage struct {
	Status *SecurityReadStorageStatus `json:"status,omitempty"`
	Type   *SecurityReadStorageType   `json:"type,omitempty"`
}

func (o *SecurityReadStorage) GetStatus() *SecurityReadStorageStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *SecurityReadStorage) GetType() *SecurityReadStorageType {
	if o == nil {
		return nil
	}
	return o.Type
}

type SecurityReadSunroofStatus string

const (
	SecurityReadSunroofStatusOpen    SecurityReadSunroofStatus = "OPEN"
	SecurityReadSunroofStatusClosed  SecurityReadSunroofStatus = "CLOSED"
	SecurityReadSunroofStatusUnknown SecurityReadSunroofStatus = "UNKNOWN"
)

func (e SecurityReadSunroofStatus) ToPointer() *SecurityReadSunroofStatus {
	return &e
}

func (e *SecurityReadSunroofStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "OPEN":
		fallthrough
	case "CLOSED":
		fallthrough
	case "UNKNOWN":
		*e = SecurityReadSunroofStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SecurityReadSunroofStatus: %v", v)
	}
}

type SecurityReadSunroof struct {
	Status *SecurityReadSunroofStatus `json:"status,omitempty"`
	type_  *string                    `const:"sunroof" json:"type,omitempty"`
}

func (s SecurityReadSunroof) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SecurityReadSunroof) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *SecurityReadSunroof) GetStatus() *SecurityReadSunroofStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *SecurityReadSunroof) GetType() *string {
	return types.String("sunroof")
}

type SecurityReadWindowsStatus string

const (
	SecurityReadWindowsStatusOpen    SecurityReadWindowsStatus = "OPEN"
	SecurityReadWindowsStatusClosed  SecurityReadWindowsStatus = "CLOSED"
	SecurityReadWindowsStatusUnknown SecurityReadWindowsStatus = "UNKNOWN"
)

func (e SecurityReadWindowsStatus) ToPointer() *SecurityReadWindowsStatus {
	return &e
}

func (e *SecurityReadWindowsStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "OPEN":
		fallthrough
	case "CLOSED":
		fallthrough
	case "UNKNOWN":
		*e = SecurityReadWindowsStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SecurityReadWindowsStatus: %v", v)
	}
}

type SecurityReadWindowsType string

const (
	SecurityReadWindowsTypeFrontLeft  SecurityReadWindowsType = "frontLeft"
	SecurityReadWindowsTypeFrontRight SecurityReadWindowsType = "frontRight"
	SecurityReadWindowsTypeBackLeft   SecurityReadWindowsType = "backLeft"
	SecurityReadWindowsTypeBackRight  SecurityReadWindowsType = "backRight"
)

func (e SecurityReadWindowsType) ToPointer() *SecurityReadWindowsType {
	return &e
}

func (e *SecurityReadWindowsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "frontLeft":
		fallthrough
	case "frontRight":
		fallthrough
	case "backLeft":
		fallthrough
	case "backRight":
		*e = SecurityReadWindowsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SecurityReadWindowsType: %v", v)
	}
}

type SecurityReadWindows struct {
	Status *SecurityReadWindowsStatus `json:"status,omitempty"`
	Type   *SecurityReadWindowsType   `json:"type,omitempty"`
}

func (o *SecurityReadWindows) GetStatus() *SecurityReadWindowsStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *SecurityReadWindows) GetType() *SecurityReadWindowsType {
	if o == nil {
		return nil
	}
	return o.Type
}

type SecurityRead struct {
	ChargingPort []SecurityReadChargingPort `json:"chargingPort,omitempty"`
	Doors        []SecurityReadDoors        `json:"doors,omitempty"`
	IsLocked     *bool                      `json:"isLocked,omitempty"`
	Storage      []SecurityReadStorage      `json:"storage,omitempty"`
	Sunroof      []SecurityReadSunroof      `json:"sunroof,omitempty"`
	Windows      []SecurityReadWindows      `json:"windows,omitempty"`
}

func (o *SecurityRead) GetChargingPort() []SecurityReadChargingPort {
	if o == nil {
		return nil
	}
	return o.ChargingPort
}

func (o *SecurityRead) GetDoors() []SecurityReadDoors {
	if o == nil {
		return nil
	}
	return o.Doors
}

func (o *SecurityRead) GetIsLocked() *bool {
	if o == nil {
		return nil
	}
	return o.IsLocked
}

func (o *SecurityRead) GetStorage() []SecurityReadStorage {
	if o == nil {
		return nil
	}
	return o.Storage
}

func (o *SecurityRead) GetSunroof() []SecurityReadSunroof {
	if o == nil {
		return nil
	}
	return o.Sunroof
}

func (o *SecurityRead) GetWindows() []SecurityReadWindows {
	if o == nil {
		return nil
	}
	return o.Windows
}
